{"version":3,"file":"index-DwgUsjTK.js","sources":["../../../../node_modules/@unhead/schema-org/dist/index.mjs","../../../../components/pages/main/Servers.vue","../../../../components/pages/main/Benefits.vue","../../../../components/pages/main/GlobalNetwork.vue","../../../../components/pages/main/NoLogs.vue","../../../../utils/structured-data.ts","../../../../composables/useStructuredData/useOrganization.ts","../../../../composables/useStructuredData/useWebSite.ts","../../../../composables/useStructuredData/useWebPage.ts","../../../../composables/useStructuredData/useSoftwareApp.ts","../../../../composables/useStructuredData/useBreadcrumb.ts","../../../../composables/useStructuredData/useQuestion.ts","../../../../pages/index.vue"],"sourcesContent":["import { U as UnheadSchemaOrg } from './shared/schema-org.2da2cd3d.mjs';\nexport { H as HowToId, a1 as PluginSchemaOrg, P as PrimaryArticleId, k as PrimaryBookId, m as PrimaryBreadcrumbId, s as PrimaryEventId, X as PrimaryWebPageId, _ as PrimaryWebSiteId, M as ProductId, R as RecipeId, a2 as SchemaOrgUnheadPlugin, L as addressResolver, g as aggregateOfferResolver, h as aggregateRatingResolver, i as articleResolver, j as bookEditionResolver, l as bookResolver, o as breadcrumbResolver, p as commentResolver, q as courseResolver, c as createSchemaOrgGraph, a as dedupeNodes, d as defineSchemaOrgResolver, t as eventResolver, w as foodEstablishmentResolver, x as howToResolver, z as howToStepDirectionResolver, y as howToStepResolver, B as imageResolver, A as itemListResolver, C as jobPostingResolver, D as listItemResolver, E as localBusinessResolver, F as movieResolver, n as normaliseNodes, G as offerResolver, I as openingHoursResolver, J as organizationResolver, K as personResolver, u as placeResolver, N as productResolver, O as questionResolver, Q as ratingResolver, Z as readActionResolver, S as recipeResolver, r as resolveMeta, b as resolveNode, e as resolveNodeId, f as resolveRelation, V as reviewResolver, a0 as searchActionResolver, T as softwareAppResolver, W as videoResolver, v as virtualLocationResolver, Y as webPageResolver, $ as webSiteResolver } from './shared/schema-org.2da2cd3d.mjs';\nimport { getActiveHead, useHead } from 'unhead';\nimport 'ufo';\n\nfunction provideResolver(input, resolver) {\n  if (!input)\n    input = {};\n  input._resolver = resolver;\n  return input;\n}\nfunction defineAddress(input) {\n  return provideResolver(input, \"address\");\n}\nfunction defineAggregateOffer(input) {\n  return provideResolver(input, \"aggregateOffer\");\n}\nfunction defineAggregateRating(input) {\n  return provideResolver(input, \"aggregateRating\");\n}\nfunction defineArticle(input) {\n  return provideResolver(input, \"article\");\n}\nfunction defineBreadcrumb(input) {\n  return provideResolver(input, \"breadcrumb\");\n}\nfunction defineComment(input) {\n  return provideResolver(input, \"comment\");\n}\nfunction defineEvent(input) {\n  return provideResolver(input, \"event\");\n}\nfunction defineFoodEstablishment(input) {\n  return provideResolver(input, \"foodEstablishment\");\n}\nfunction defineVirtualLocation(input) {\n  return provideResolver(input, \"virtualLocation\");\n}\nfunction definePlace(input) {\n  return provideResolver(input, \"place\");\n}\nfunction defineHowTo(input) {\n  return provideResolver(input, \"howTo\");\n}\nfunction defineHowToStep(input) {\n  return provideResolver(input, \"howToStep\");\n}\nfunction defineImage(input) {\n  return provideResolver(input, \"image\");\n}\nfunction defineJobPosting(input) {\n  return provideResolver(input, \"jobPosting\");\n}\nfunction defineLocalBusiness(input) {\n  return provideResolver(input, \"localBusiness\");\n}\nfunction defineOffer(input) {\n  return provideResolver(input, \"offer\");\n}\nfunction defineOpeningHours(input) {\n  return provideResolver(input, \"openingHours\");\n}\nfunction defineOrganization(input) {\n  return provideResolver(input, \"organization\");\n}\nfunction definePerson(input) {\n  return provideResolver(input, \"person\");\n}\nfunction defineProduct(input) {\n  return provideResolver(input, \"product\");\n}\nfunction defineQuestion(input) {\n  return provideResolver(input, \"question\");\n}\nfunction defineRecipe(input) {\n  return provideResolver(input, \"recipe\");\n}\nfunction defineReview(input) {\n  return provideResolver(input, \"review\");\n}\nfunction defineVideo(input) {\n  return provideResolver(input, \"video\");\n}\nfunction defineWebPage(input) {\n  return provideResolver(input, \"webPage\");\n}\nfunction defineWebSite(input) {\n  return provideResolver(input, \"webSite\");\n}\nfunction defineBook(input) {\n  return provideResolver(input, \"book\");\n}\nfunction defineCourse(input) {\n  return provideResolver(input, \"course\");\n}\nfunction defineItemList(input) {\n  return provideResolver(input, \"itemList\");\n}\nfunction defineListItem(input) {\n  return provideResolver(input, \"listItem\");\n}\nfunction defineMovie(input) {\n  return provideResolver(input, \"movie\");\n}\nfunction defineSearchAction(input) {\n  return provideResolver(input, \"searchAction\");\n}\nfunction defineReadAction(input) {\n  return provideResolver(input, \"readAction\");\n}\nfunction defineSoftwareApp(input) {\n  return provideResolver(input, \"softwareApp\");\n}\nfunction defineBookEdition(input) {\n  return provideResolver(input, \"bookEdition\");\n}\nfunction useSchemaOrg(input) {\n  const head = getActiveHead();\n  if (!head)\n    return;\n  head.use(UnheadSchemaOrg());\n  return useHead({\n    script: [\n      {\n        type: \"application/ld+json\",\n        key: \"schema-org-graph\",\n        nodes: input\n      }\n    ]\n  });\n}\n\nexport { UnheadSchemaOrg, defineAddress, defineAggregateOffer, defineAggregateRating, defineArticle, defineBook, defineBookEdition, defineBreadcrumb, defineComment, defineCourse, defineEvent, defineFoodEstablishment, defineHowTo, defineHowToStep, defineImage, defineItemList, defineJobPosting, defineListItem, defineLocalBusiness, defineMovie, defineOffer, defineOpeningHours, defineOrganization, definePerson, definePlace, defineProduct, defineQuestion, defineReadAction, defineRecipe, defineReview, defineSearchAction, defineSoftwareApp, defineVideo, defineVirtualLocation, defineWebPage, defineWebSite, useSchemaOrg };\n","<script setup lang=\"ts\">\nimport Section from '~/components/global/Section.vue'\nimport VButton from '~/ui/VButton.vue'\nimport ServersCard from '~/components/pages/main/Servers/ServersCard.vue'\n\nconst serversCards = [\n  { imgType: 'openvpn' },\n  { imgType: 'lock' },\n  { imgType: 'shield-security' },\n]\n</script>\n\n<template>\n  <Section class=\"servers\" bg-dark>\n    <div class=\"servers-block\">\n      <NuxtImg\n        src=\"/images/pages/main/servers.png\"\n        alt=\"Servers\"\n        width=\"611\"\n        height=\"584\"\n        class=\"servers-block__img\"\n      />\n      <div class=\"servers-block__content\">\n        <i18n-t scope=\"global\" keypath=\"main.servers.title\" tag=\"h2\">\n          <template #title-highlight>\n            <span class=\"color-orange\">\n              {{ $t('main.servers.title-highlight') }}\n            </span>\n          </template>\n        </i18n-t>\n        <NuxtImg\n          src=\"/images/pages/main/servers-mobile.png\"\n          alt=\"Servers\"\n          width=\"343\"\n          height=\"375\"\n          class=\"servers-block__img-mobile\"\n        />\n        <p>{{ $t('main.servers.text-1') }}</p>\n        <p>{{ $t('main.servers.text-2') }}</p>\n        <VButton>{{ $t('main.servers.button') }}</VButton>\n      </div>\n    </div>\n\n    <div class=\"servers-security\">\n      <ServersCard\n        v-for=\"(card, key) in serversCards\"\n        :key=\"card.imgType\"\n        :img-type=\"card.imgType\"\n        :title=\"$t(`main.servers.list[${key}].title`)\"\n        :text=\"$t(`main.servers.list[${key}].text`)\"\n      />\n    </div>\n  </Section>\n</template>\n\n<style scoped lang=\"scss\">\n.servers {\n  &-block {\n    display: flex;\n    align-items: flex-end;\n    justify-content: space-between;\n    background-color: var(--gray-3);\n    border-radius: 20px;\n    margin-bottom: 20px;\n    text-align: center;\n\n    @media (min-width: 576px) {\n      max-width: 600px;\n      margin: 0 auto 20px;\n    }\n\n    @media (min-width: 992px) {\n      max-width: none;\n      text-align: unset;\n    }\n\n    &__img {\n      display: none;\n      width: 48%;\n\n      @media (min-width: 992px) {\n        display: block;\n      }\n    }\n\n    &__img-mobile {\n      width: 100%;\n      margin-left: -16px;\n\n      @media (min-width: 992px) {\n        display: none;\n      }\n    }\n\n    &__content {\n      display: flex;\n      flex-direction: column;\n      max-width: 600px;\n      row-gap: 20px;\n      padding: 40px 16px 16px;\n\n      @media (min-width: 576px) {\n        row-gap: 30px;\n      }\n\n      @media (min-width: 992px) {\n        align-items: flex-start;\n        padding: 60px 40px 60px 0;\n      }\n\n      h2 {\n        color: var(--white);\n        text-align: center;\n\n        @media (min-width: 768px) {\n          text-align: unset;\n        }\n      }\n\n      p {\n        color: var(--gray-15);\n      }\n\n      button {\n        margin: 20px auto 0;\n\n        @media (min-width: 992px) {\n          margin: 0;\n        }\n      }\n    }\n  }\n\n  &-security {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n\n    @media (min-width: 992px) {\n      flex-direction: row;\n    }\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport { ref } from 'vue'\n\nimport Section from '~/components/global/Section.vue'\n\nconst numberOfTabs = 4\nconst activeTab = ref(0)\n</script>\n\n<template>\n  <Section class=\"benefits\">\n    <div class=\"benefits__content\">\n      <i18n-t scope=\"global\" keypath=\"main.benefits.title\" tag=\"h2\">\n        <template #title-highlight>\n          <span class=\"color-orange\">\n            {{ $t('main.benefits.title-highlight') }}\n          </span>\n        </template>\n      </i18n-t>\n      <p>{{ $t('main.benefits.text') }}</p>\n\n      <div class=\"benefits-tabs\">\n        <div class=\"benefits-tabs__list\">\n          <div\n            v-for=\"(tab, key) in numberOfTabs\"\n            :key=\"tab\"\n            class=\"benefits-tabs__item\"\n            :class=\"{ active: activeTab === key }\"\n            @click=\"activeTab = key\"\n          >\n            {{ $t(`main.benefits.tabs[${key}].title`) }}\n          </div>\n        </div>\n        <div class=\"benefits-tabs__content\">\n          {{ $t(`main.benefits.tabs[${activeTab}].text`) }}\n        </div>\n      </div>\n\n      <div class=\"benefits-tabs-mobile\">\n        <div\n          v-for=\"(tab, key) in numberOfTabs\"\n          :key=\"tab\"\n          class=\"benefits-tabs-mobile__item\"\n        >\n          <div\n            class=\"benefits-tabs-mobile__item-title\"\n            :class=\"{ active: activeTab === key }\"\n            @click=\"activeTab = key\"\n          >\n            <span class=\"text-montserrat\">\n              {{ $t(`main.benefits.tabs[${key}].title`) }}\n            </span>\n            <span class=\"icon-chevron\" />\n          </div>\n          <div\n            v-if=\"activeTab === key\"\n            class=\"benefits-tabs-mobile__item-content\"\n          >\n            {{ $t(`main.benefits.tabs[${activeTab}].text`) }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </Section>\n</template>\n\n<style scoped lang=\"scss\">\n.benefits {\n  padding: 40px 0 0;\n  background-color: var(--gray-3);\n\n  @media (min-width: 576px) {\n    padding: 80px 0;\n  }\n\n  &__content {\n    max-width: 1013px;\n    margin: 0 auto;\n    color: var(--gray-14);\n    text-align: center;\n\n    h2 {\n      color: var(--white);\n    }\n\n    p {\n      margin-top: 20px;\n\n      @media (min-width: 768px) {\n        margin-top: 30px;\n      }\n    }\n  }\n\n  &-tabs {\n    display: none;\n\n    @media (min-width: 768px) {\n      display: block;\n      margin-top: 60px;\n\n      &__list {\n        display: inline-flex;\n        padding: 5px;\n        border-radius: 20px;\n        background-color: var(--gray-6);\n      }\n\n      &__item {\n        text-align: center;\n        padding: 15px;\n        border-radius: 15px;\n        font-size: 16px;\n        color: var(--gray-12);\n        font-weight: 500;\n        cursor: pointer;\n\n        &.active {\n          color: var(--white);\n          background-color: var(--gray-8);\n        }\n      }\n\n      &__content {\n        margin-top: 30px;\n        transition: var(--base-transition);\n      }\n    }\n\n    @media (min-width: 992px) {\n      &__item {\n        padding: 15px 30px;\n        font-size: 18px;\n      }\n    }\n  }\n\n  &-tabs-mobile {\n    display: flex;\n    flex-direction: column;\n    row-gap: 1px;\n    margin: 20px -16px 0;\n    text-align: left;\n\n    @media (min-width: 768px) {\n      display: none;\n    }\n\n    &__item {\n      display: flex;\n      flex-direction: column;\n      padding: 20px 10px;\n      color: var(--white);\n      background-color: var(--gray-6);\n\n      &-title {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        column-gap: 20px;\n        font-size: 18px;\n        font-weight: 500;\n        cursor: pointer;\n\n        &.active {\n          .icon-chevron {\n            transform: rotate(180deg);\n          }\n        }\n      }\n\n      &-content {\n        margin-top: 15px;\n        color: var(--gray-12);\n        transition: var(--base-transition);\n      }\n    }\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport VButton from '~/ui/VButton.vue'\nimport Section from '~/components/global/Section.vue'\nimport GlobalNetworkCard from '~/components/pages/main/GlobalNetwork/GlobalNetworkCard.vue'\n\nconst networkCards = [{ imgType: 'security-time' }, { imgType: 'shield-cross' }]\n</script>\n\n<template>\n  <Section class=\"global\">\n    <div class=\"global-row\">\n      <div class=\"global-network\">\n        <h2>{{ $t('main.global-network.title') }}</h2>\n        <p>{{ $t('main.global-network.text') }}</p>\n        <div class=\"global-network__row text-sm\">\n          <span>Around 20</span>\n          {{ $t('main.global-network.list[0]') }}\n        </div>\n        <div class=\"global-network__row text-sm\">\n          <span>4</span>\n          {{ $t('main.global-network.list[1]') }}\n        </div>\n        <div class=\"global-network__row text-sm\">\n          <span>100%</span>\n          {{ $t('main.global-network.list[2]') }}\n        </div>\n        <div class=\"global-network__button\">\n          <VButton>{{ $t('main.global-network.button') }}</VButton>\n        </div>\n      </div>\n\n      <div class=\"global-dns\">\n        <GlobalNetworkCard\n          v-for=\"(card, key) in networkCards\"\n          :key=\"card.imgType\"\n          :img-type=\"card.imgType\"\n          :title=\"$t(`main.global-network.cards[${key}].title`)\"\n          :text=\"$t(`main.global-network.cards[${key}].text`)\"\n        />\n      </div>\n    </div>\n  </Section>\n</template>\n\n<style scoped lang=\"scss\">\n.global {\n  &-row {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n\n    @media (min-width: 992px) {\n      flex-direction: row;\n      align-items: stretch;\n    }\n  }\n\n  &-network {\n    padding: 20px 16px;\n    background-color: var(--gray-2);\n    border-radius: 20px;\n\n    @media (min-width: 768px) {\n      padding: 40px;\n    }\n\n    @media (min-width: 992px) {\n      width: 50%;\n    }\n\n    h2 {\n      color: var(--white);\n      margin-bottom: 10px;\n\n      @media (min-width: 768px) {\n        margin-bottom: 37px;\n      }\n    }\n\n    p {\n      color: var(--gray-15);\n      margin-bottom: 10px;\n    }\n\n    &__row {\n      display: flex;\n      align-items: flex-end;\n      justify-content: space-between;\n      padding: 10px 0;\n      margin-bottom: 10px;\n      color: var(--gray-15);\n      border-bottom: 2px solid rgba(255, 255, 255, 0.13);\n\n      span {\n        font-family: var(--Montserrat);\n        font-size: 28px;\n        line-height: 38px;\n        font-weight: 700;\n        color: var(--white);\n        text-transform: uppercase;\n\n        @media (min-width: 768px) {\n          font-size: 44px;\n          line-height: 46px;\n        }\n      }\n    }\n\n    &__button {\n      margin-top: 20px;\n\n      @media (min-width: 768px) {\n        margin-top: 24px;\n      }\n    }\n  }\n\n  &-dns {\n    display: flex;\n    flex-direction: column;\n    row-gap: 20px;\n\n    @media (min-width: 992px) {\n      width: 50%;\n    }\n  }\n}\n</style>\n","<script setup lang=\"ts\">\nimport Section from '~/components/global/Section.vue'\nimport NoLogsCard from '~/components/pages/main/NoLogs/NoLogsCard.vue'\n\nconst noLogsCards = [\n  { imgType: 'security-user' },\n  { imgType: 'key-square' },\n  { imgType: 'folder-2' },\n]\n</script>\n\n<template>\n  <Section class=\"no-logs\">\n    <div class=\"no-logs__content\">\n      <div>\n        <i18n-t scope=\"global\" keypath=\"main.no-logs.title\" tag=\"h2\">\n          <template #title-highlight>\n            <span class=\"color-orange\">\n              {{ $t('main.no-logs.title-highlight') }}\n            </span>\n          </template>\n        </i18n-t>\n        <p>{{ $t('main.no-logs.text') }}</p>\n      </div>\n      <NuxtImg\n        src=\"/images/pages/main/no-logs.png\"\n        alt=\"Logs\"\n        width=\"758\"\n        height=\"588\"\n      />\n    </div>\n\n    <div class=\"no-logs-cards\">\n      <NoLogsCard\n        v-for=\"(card, key) in noLogsCards\"\n        :key=\"card.imgType\"\n        :img-type=\"card.imgType\"\n        :title=\"$t(`main.no-logs.list[${key}].title`)\"\n        :text=\"$t(`main.no-logs.list[${key}].text`)\"\n      />\n    </div>\n  </Section>\n</template>\n\n<style scoped lang=\"scss\">\n.no-logs {\n  background-color: var(--gray-17);\n\n  &__content {\n    display: flex;\n    flex-direction: column;\n    gap: 30px;\n    margin-bottom: 30px;\n    text-align: center;\n\n    @media (min-width: 768px) {\n      flex-direction: row;\n      align-items: center;\n      text-align: unset;\n    }\n\n    @media (min-width: 992px) {\n      gap: 50px;\n    }\n\n    h2 {\n      margin-bottom: 20px;\n\n      @media (min-width: 768px) {\n        margin-bottom: 40px;\n      }\n    }\n\n    img {\n      width: 100%;\n\n      @media (min-width: 768px) {\n        width: 54%;\n      }\n    }\n  }\n\n  &-cards {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n\n    @media (min-width: 992px) {\n      flex-direction: row;\n    }\n  }\n}\n</style>\n","import { BASE_LINK } from '@/constants/links'\n\nconst getFullUrl = (path = '', hash = ''): string => {\n  return BASE_LINK + path + hash\n}\n\nexport { getFullUrl }\n","import { defineOrganization } from '@unhead/schema-org'\nimport { useRoute } from 'vue-router'\n\nimport { getFullUrl } from '~/utils/structured-data'\n\ntype TOrganizationProps = {\n  description: string\n}\n\nexport const useOrganization = ({ description }: TOrganizationProps) => {\n  const route = useRoute()\n\n  return defineOrganization({\n    '@id': getFullUrl(route.path, '#organization'),\n    name: 'VPNLY',\n    description,\n    logo: getFullUrl('/logo.png'),\n    url: getFullUrl(route.path),\n    address: {\n      '@type': 'PostalAddress',\n      streetAddress: 'Rue Improbable 99',\n      addressLocality: 'Paris',\n      addressCountry: 'FR',\n      addressRegion: 'Ile-de-France',\n      postalCode: '75001',\n    },\n  })\n}\n","import { defineWebSite } from '@unhead/schema-org'\nimport { useRoute } from 'vue-router'\n\nimport { getFullUrl } from '~/utils/structured-data'\n\ntype TWebSiteProps = {\n  description: string\n}\n\nexport const useWebSite = ({ description }: TWebSiteProps) => {\n  const route = useRoute()\n\n  return defineWebSite({\n    '@id': getFullUrl(route.path, '#website'),\n    name: 'VPNLY',\n    description,\n    image: getFullUrl('/assets/branding/logo_squared@2x.jpg'),\n    url: getFullUrl(route.path),\n  })\n}\n","import { defineWebPage } from '@unhead/schema-org'\nimport { useRoute } from 'vue-router'\n\nimport { getFullUrl } from '~/utils/structured-data'\n\ntype TWebPageProps = {\n  types?: string[]\n  name: string\n  description: string\n}\n\nexport const useWebPage = ({\n  types = [],\n  name,\n  description,\n}: TWebPageProps) => {\n  const route = useRoute()\n\n  return defineWebPage({\n    '@type': ['WebPage', ...types],\n    url: getFullUrl(route.path),\n    name,\n    description,\n    datePublished: '2022-01-21T13:52:56+00:00',\n    dateModified: '2024-02-07T14:10:14+00:00',\n  })\n}\n","import { defineSoftwareApp } from '@unhead/schema-org'\n\ntype TSoftwareAppProps = {\n  name: string\n}\n\nexport const useSoftwareApp = ({ name }: TSoftwareAppProps) => {\n  return defineSoftwareApp({\n    name,\n    operatingSystem: 'Windows, macOS, iOS, Android, Linux, Chrome',\n    applicationCategory: 'SecurityApplication',\n    aggregateRating: {\n      ratingValue: '4.6',\n      ratingCount: 8864,\n      bestRating: 5,\n    },\n    offers: {\n      price: '1.00',\n      priceCurrency: 'USD',\n    },\n  })\n}\n","import { defineBreadcrumb } from '@unhead/schema-org'\nimport { useRoute } from 'vue-router'\n\nimport { getFullUrl } from '~/utils/structured-data'\n\ntype TItemListElement = {\n  name: string\n  item?: string\n}\n\ntype TBreadcrumbProps = {\n  itemListElement: string[]\n}\n\nexport const useBreadcrumb = ({ itemListElement }: TBreadcrumbProps) => {\n  const route = useRoute()\n\n  const formattedItemList: TItemListElement[] = itemListElement.map(\n    (item, index, array) => {\n      const isLastItem = index === array.length - 1\n\n      const formattedItem: TItemListElement = {\n        name: item,\n      }\n\n      if (!isLastItem) {\n        formattedItem.item = getFullUrl(route.path)\n      }\n\n      return formattedItem\n    },\n  )\n\n  return defineBreadcrumb({\n    itemListElement: formattedItemList,\n  })\n}\n","import { defineQuestion } from '@unhead/schema-org'\n\nimport type { TFaqItem } from '~/types/faq'\n\ntype TQuestionProps = {\n  questionsList: TFaqItem[]\n}\n\nexport const useQuestion = ({ questionsList }: TQuestionProps) => {\n  return questionsList.map((question) =>\n    defineQuestion({\n      name: question.title,\n      acceptedAnswer: question.text,\n    }),\n  )\n}\n","<script setup lang=\"ts\">\nimport { useI18n } from 'vue-i18n'\nimport { useSeoMeta } from 'unhead'\nimport { useSchemaOrg } from '@unhead/schema-org'\n\nimport Fcp from '~/components/pages/main/Fcp.vue'\nimport Servers from '~/components/pages/main/Servers.vue'\nimport Benefits from '~/components/pages/main/Benefits.vue'\nimport GlobalNetwork from '~/components/pages/main/GlobalNetwork.vue'\nimport NoLogs from '~/components/pages/main/NoLogs.vue'\nimport Support from '~/components/pages/main/Support.vue'\nimport Faq from '~/components/pages/main/Faq.vue'\nimport type { TFaqItem } from '~/types/faq'\nimport { getFullUrl } from '~/utils/structured-data'\nimport {\n  useOrganization,\n  useWebSite,\n  useWebPage,\n  useSoftwareApp,\n  useBreadcrumb,\n  useQuestion,\n} from '~/composables/useStructuredData'\n\nconst { t, tm, rt } = useI18n()\n\nuseSeoMeta({\n  title: t('main.seo.title'),\n  ogTitle: t('main.seo.title'),\n  description: t('main.seo.description'),\n  ogDescription: t('main.seo.description'),\n  ogImage: getFullUrl('/image.png'),\n})\n\nconst faqList: TFaqItem[] = tm('main.faq.list')\nconst breadcrumbList: string[] = tm('main.structured-data.breadcrumb')\n\nconst formattedFaqList = faqList.map((faq) => ({\n  title: rt(faq.title),\n  text: rt(faq.text),\n}))\n\nconst formattedBreadcrumbList = breadcrumbList.map((breadcrumb) =>\n  rt(breadcrumb),\n)\n\nuseSchemaOrg([\n  useOrganization({\n    description: t('main.seo.description'),\n  }),\n  useWebSite({\n    description: t('main.structured-data.name'),\n  }),\n  useWebPage({\n    types: ['FAQPage'],\n    name: t('main.seo.title'),\n    description: t('main.seo.description'),\n  }),\n  useSoftwareApp({\n    name: t('main.structured-data.name'),\n  }),\n  useBreadcrumb({\n    itemListElement: formattedBreadcrumbList,\n  }),\n  ...useQuestion({\n    questionsList: formattedFaqList,\n  }),\n])\n</script>\n\n<template>\n  <Fcp />\n  <Servers />\n  <Benefits />\n  <GlobalNetwork />\n  <NoLogs />\n  <Support>\n    <template #title>\n      <i18n-t scope=\"global\" keypath=\"main.support.title\" tag=\"h2\">\n        <template #title-highlight>\n          <span class=\"color-orange\">\n            {{ $t('main.support.title-highlight') }}\n          </span>\n        </template>\n      </i18n-t>\n    </template>\n    <template #description>\n      <p>{{ $t('main.support.text') }}</p>\n    </template>\n    <template #latest-donate>\n      <h3 class=\"support__title\">\n        {{ $t('main.support.activity') }}\n      </h3>\n      <div class=\"support-list__row\">\n        <NuxtImg\n          src=\"/images/icons/icon-heart-solid.svg\"\n          alt=\"Heart\"\n          width=\"24\"\n          height=\"25\"\n        />\n        <span>Someone donated $ 50</span>\n        <span>1h ago</span>\n      </div>\n    </template>\n  </Support>\n  <Faq :list=\"formattedFaqList\" />\n</template>\n\n<style lang=\"scss\" scoped>\n.support {\n  &__title {\n    color: var(--white);\n    margin: 30px 0 20px;\n\n    @media (min-width: 768px) {\n      margin: 60px 0 30px;\n    }\n  }\n\n  &-list__row {\n    display: flex;\n    align-items: center;\n    column-gap: 15px;\n    margin-bottom: 10px;\n    color: var(--gray-15);\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n\n    span {\n      display: inline-block;\n\n      &:last-child {\n        color: var(--gray-9);\n      }\n    }\n  }\n}\n</style>\n"],"names":["index"],"mappings":"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","x_google_ignoreList":[0]}